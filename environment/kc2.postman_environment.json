{
	"id": "a1d23f3d-8832-4069-95c0-fa52012f6eaa",
	"name": "kc2",
	"values": [
		{
			"key": "kc_server",
			"value": "http://localhost:9081/auth",
			"description": "",
			"enabled": true
		},
		{
			"key": "kc_realm",
			"value": "master",
			"description": "",
			"enabled": true
		},
		{
			"key": "kc_admin_username",
			"value": "admin",
			"description": "",
			"enabled": true
		},
		{
			"key": "kc_admin_password",
			"value": "admin",
			"description": "",
			"enabled": true
		},
		{
			"key": "kc_client_id",
			"value": "admin-cli",
			"description": "",
			"enabled": true
		},
		{
			"key": "storeAndCompareGlobals1",
			"value": "() => {\n    \n    if (pm.response.text() !== \"\")\n    {\n        const responseKey = pm.info.requestName.replace(/ /g, '')+'_response';\n        let currentResponse = '';\n        try {\n            currentResponse = JSON.stringify(pm.response.json());\n        } catch(e) {\n            currentResponse = pm.response.text();\n        }\n    \n        if (!pm.globals.has(responseKey) || !pm.globals.get(responseKey) || pm.globals.get(responseKey) === \"\") \n        {\n            pm.globals.set(responseKey, currentResponse);\n        } \n        else \n        {\n            pm.test(responseKey, function () {\n                const expectedResponse = pm.globals.get(responseKey);\n                // pm.response.to.be object allows you to easily assert a set of pre-defined rules\n                // (source: https://learning.getpostman.com/docs/postman/scripts/postman_sandbox_api_reference)\n                pm.response.to.have.body(expectedResponse);\n            });\n        }\n    }\n\n}",
			"enabled": true
		},
		{
			"key": "storeAndCompareGlobals2",
			"value": "() => {\n    \n    if (pm.response.text() !== \"\")\n    {\n        const responseKey = pm.info.requestName.replace(/ /g, '')+'_response';\n        let currentResponse = '';\n        try {\n            currentResponse = JSON.stringify(pm.response.json());\n        } catch(e) {\n            currentResponse = pm.response.text();\n        }\n    \n        if (!pm.globals.has(responseKey) || !pm.globals.get(responseKey) || pm.globals.get(responseKey) === \"\") \n        {\n            pm.globals.set(responseKey, currentResponse);\n        } \n        else \n        {\n            pm.test(responseKey, function () {\n                const expectedResponse = pm.globals.get(responseKey);\n                // pm.expect is a generic assertion function\n                // (source: https://learning.getpostman.com/docs/postman/scripts/postman_sandbox_api_reference)\n                pm.expect(currentResponse).to.eql(expectedResponse);\n            });\n        }\n    }\n\n}",
			"enabled": true
		},
		{
			"key": "assertResponseStatusIs200",
			"value": "() => {\n    \n    pm.test(pm.info.requestName.replace(/ /g, '')+'_status', function() {\n        pm.response.to.have.status(200);\n        pm.response.to.be.ok;\n    });\n\n}",
			"enabled": true
		},
		{
			"key": "assertKeycloakLogout",
			"value": "() => {\n    \n    pm.test(pm.info.requestName.replace(/ /g, '')+'_status', function() {\n        pm.response.to.have.status(204);\n        pm.response.to.have.status(\"No Content\");\n    });\n\n}",
			"enabled": true
		}
	],
	"_postman_variable_scope": "environment",
	"_postman_exported_at": "2019-03-13T10:27:54.388Z",
	"_postman_exported_using": "Postman/7.0.5"
}